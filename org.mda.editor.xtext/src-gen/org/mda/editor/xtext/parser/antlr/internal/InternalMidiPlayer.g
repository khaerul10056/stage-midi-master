/*
* generated by Xtext
*/
grammar InternalMidiPlayer;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.mda.editor.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mda.editor.xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.mda.editor.xtext.services.MidiPlayerGrammarAccess;

}

@parser::members {

 	private MidiPlayerGrammarAccess grammarAccess;
 	
    public InternalMidiPlayerParser(TokenStream input, IAstFactory factory, MidiPlayerGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/mda/editor/xtext/parser/antlr/internal/InternalMidiPlayer.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "MidiFile";	
   	}
   	
   	@Override
   	protected MidiPlayerGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMidiFile
entryRuleMidiFile returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMidiFileRule(), currentNode); }
	 iv_ruleMidiFile=ruleMidiFile 
	 { $current=$iv_ruleMidiFile.current; } 
	 EOF 
;

// Rule MidiFile
ruleMidiFile returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMidiFileAccess().getMidiFileAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMidiFileAccess().getMidiFileAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'name' 
    {
        createLeafNode(grammarAccess.getMidiFileAccess().getNameKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFileAccess().getNameEStringParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(	'path' 
    {
        createLeafNode(grammarAccess.getMidiFileAccess().getPathKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFileAccess().getPathEStringParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_path_4_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_4_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'fontsize' 
    {
        createLeafNode(grammarAccess.getMidiFileAccess().getFontsizeKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFileAccess().getFontsizeEStringParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_fontsize_6_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fontsize",
	        		lv_fontsize_6_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'pic' 
    {
        createLeafNode(grammarAccess.getMidiFileAccess().getPicKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFileAccess().getPicEStringParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_pic_8_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pic",
	        		lv_pic_8_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'key' 
    {
        createLeafNode(grammarAccess.getMidiFileAccess().getKeyKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFileAccess().getKeyEStringParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_key_10_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"key",
	        		lv_key_10_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'{' 
    {
        createLeafNode(grammarAccess.getMidiFileAccess().getLeftCurlyBracketKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFileAccess().getPartsMidiFilePartParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_parts_12_0=ruleMidiFilePart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_12_0, 
	        		"MidiFilePart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getMidiFileAccess().getRightCurlyBracketKeyword_6_2(), null); 
    }
)?)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEStringRule(), currentNode); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleMidiFilePart
entryRuleMidiFilePart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMidiFilePartRule(), currentNode); }
	 iv_ruleMidiFilePart=ruleMidiFilePart 
	 { $current=$iv_ruleMidiFilePart.current; } 
	 EOF 
;

// Rule MidiFilePart
ruleMidiFilePart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMidiFilePartAccess().getMidiFilePartAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMidiFilePartAccess().getMidiFilePartAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFilePartAccess().getParttypeMidiFilePartTypeEnumRuleCall_1_0(), currentNode); 
	    }
		lv_parttype_1_0=ruleMidiFilePartType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFilePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parttype",
	        		lv_parttype_1_0, 
	        		"MidiFilePartType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'bar' 
    {
        createLeafNode(grammarAccess.getMidiFilePartAccess().getBarKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFilePartAccess().getBarEIntParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_bar_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFilePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"bar",
	        		lv_bar_3_0, 
	        		"EInt", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'refPart' 
    {
        createLeafNode(grammarAccess.getMidiFilePartAccess().getRefPartKeyword_3_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFilePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFilePartAccess().getRefPartMidiFilePartCrossReference_3_1_0(), currentNode); 
	    }
		ruleEString		{ 
	        currentNode = currentNode.getParent();
	    }

)
))?(	'{' 
    {
        createLeafNode(grammarAccess.getMidiFilePartAccess().getLeftCurlyBracketKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFilePartAccess().getTextlinesMidiFileTextLineParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_textlines_7_0=ruleMidiFileTextLine		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFilePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"textlines",
	        		lv_textlines_7_0, 
	        		"MidiFileTextLine", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getMidiFilePartAccess().getCommaKeyword_4_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFilePartAccess().getTextlinesMidiFileTextLineParserRuleCall_4_2_1_0(), currentNode); 
	    }
		lv_textlines_9_0=ruleMidiFileTextLine		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFilePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"textlines",
	        		lv_textlines_9_0, 
	        		"MidiFileTextLine", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getMidiFilePartAccess().getRightCurlyBracketKeyword_4_3(), null); 
    }
)?)
;





// Entry rule entryRuleMidiFileTextLine
entryRuleMidiFileTextLine returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMidiFileTextLineRule(), currentNode); }
	 iv_ruleMidiFileTextLine=ruleMidiFileTextLine 
	 { $current=$iv_ruleMidiFileTextLine.current; } 
	 EOF 
;

// Rule MidiFileTextLine
ruleMidiFileTextLine returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMidiFileTextLineAccess().getMidiFileTextLineAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMidiFileTextLineAccess().getMidiFileTextLineAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'{' 
    {
        createLeafNode(grammarAccess.getMidiFileTextLineAccess().getLeftCurlyBracketKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFileTextLineAccess().getChordPartsMidiFileChordPartParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_chordParts_2_0=ruleMidiFileChordPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFileTextLineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"chordParts",
	        		lv_chordParts_2_0, 
	        		"MidiFileChordPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getMidiFileTextLineAccess().getRightCurlyBracketKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEIntRule(), currentNode); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0(), null); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleMidiFileChordPart
entryRuleMidiFileChordPart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMidiFileChordPartRule(), currentNode); }
	 iv_ruleMidiFileChordPart=ruleMidiFileChordPart 
	 { $current=$iv_ruleMidiFileChordPart.current; } 
	 EOF 
;

// Rule MidiFileChordPart
ruleMidiFileChordPart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMidiFileChordPartAccess().getMidiFileChordPartAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMidiFileChordPartAccess().getMidiFileChordPartAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'(' 
    {
        createLeafNode(grammarAccess.getMidiFileChordPartAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFileChordPartAccess().getChordEStringParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_chord_2_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFileChordPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"chord",
	        		lv_chord_2_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getMidiFileChordPartAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMidiFileChordPartAccess().getTextEStringParserRuleCall_2_0(), currentNode); 
	    }
		lv_text_4_0=ruleEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMidiFileChordPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"text",
	        		lv_text_4_0, 
	        		"EString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Rule MidiFilePartType
ruleMidiFilePartType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'REFRAIN' 
	{
        $current = grammarAccess.getMidiFilePartTypeAccess().getREFRAINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMidiFilePartTypeAccess().getREFRAINEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'BRIDGE' 
	{
        $current = grammarAccess.getMidiFilePartTypeAccess().getBRIDGEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMidiFilePartTypeAccess().getBRIDGEEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'VERS' 
	{
        $current = grammarAccess.getMidiFilePartTypeAccess().getVERSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMidiFilePartTypeAccess().getVERSEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'SOLO' 
	{
        $current = grammarAccess.getMidiFilePartTypeAccess().getSOLOEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMidiFilePartTypeAccess().getSOLOEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'ZWISCHENSPIEL' 
	{
        $current = grammarAccess.getMidiFilePartTypeAccess().getZWISCHENSPIELEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMidiFilePartTypeAccess().getZWISCHENSPIELEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'INTRO' 
	{
        $current = grammarAccess.getMidiFilePartTypeAccess().getINTROEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMidiFilePartTypeAccess().getINTROEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'EXTRO' 
	{
        $current = grammarAccess.getMidiFilePartTypeAccess().getEXTROEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMidiFilePartTypeAccess().getEXTROEnumLiteralDeclaration_6(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


