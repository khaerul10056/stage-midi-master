/*
* generated by Xtext
*/
package org.mda.editor.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.mda.editor.xtext.services.MidiPlayerGrammarAccess;

public class MidiPlayerParser extends AbstractContentAssistParser {
	
	@Inject
	private MidiPlayerGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.mda.editor.xtext.ui.contentassist.antlr.internal.InternalMidiPlayerParser createParser() {
		org.mda.editor.xtext.ui.contentassist.antlr.internal.InternalMidiPlayerParser result = new org.mda.editor.xtext.ui.contentassist.antlr.internal.InternalMidiPlayerParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getMidiFilePartTypeAccess().getAlternatives(), "rule__MidiFilePartType__Alternatives");
					put(grammarAccess.getMidiFileAccess().getGroup(), "rule__MidiFile__Group__0");
					put(grammarAccess.getMidiFileAccess().getGroup_1(), "rule__MidiFile__Group_1__0");
					put(grammarAccess.getMidiFileAccess().getGroup_2(), "rule__MidiFile__Group_2__0");
					put(grammarAccess.getMidiFileAccess().getGroup_3(), "rule__MidiFile__Group_3__0");
					put(grammarAccess.getMidiFileAccess().getGroup_4(), "rule__MidiFile__Group_4__0");
					put(grammarAccess.getMidiFileAccess().getGroup_5(), "rule__MidiFile__Group_5__0");
					put(grammarAccess.getMidiFileAccess().getGroup_6(), "rule__MidiFile__Group_6__0");
					put(grammarAccess.getMidiFilePartAccess().getGroup(), "rule__MidiFilePart__Group__0");
					put(grammarAccess.getMidiFilePartAccess().getGroup_2(), "rule__MidiFilePart__Group_2__0");
					put(grammarAccess.getMidiFilePartAccess().getGroup_3(), "rule__MidiFilePart__Group_3__0");
					put(grammarAccess.getMidiFilePartAccess().getGroup_4(), "rule__MidiFilePart__Group_4__0");
					put(grammarAccess.getMidiFilePartAccess().getGroup_4_2(), "rule__MidiFilePart__Group_4_2__0");
					put(grammarAccess.getMidiFileTextLineAccess().getGroup(), "rule__MidiFileTextLine__Group__0");
					put(grammarAccess.getMidiFileTextLineAccess().getGroup_1(), "rule__MidiFileTextLine__Group_1__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getMidiFileChordPartAccess().getGroup(), "rule__MidiFileChordPart__Group__0");
					put(grammarAccess.getMidiFileChordPartAccess().getGroup_1(), "rule__MidiFileChordPart__Group_1__0");
					put(grammarAccess.getMidiFileAccess().getNameAssignment_1_1(), "rule__MidiFile__NameAssignment_1_1");
					put(grammarAccess.getMidiFileAccess().getPathAssignment_2_1(), "rule__MidiFile__PathAssignment_2_1");
					put(grammarAccess.getMidiFileAccess().getFontsizeAssignment_3_1(), "rule__MidiFile__FontsizeAssignment_3_1");
					put(grammarAccess.getMidiFileAccess().getPicAssignment_4_1(), "rule__MidiFile__PicAssignment_4_1");
					put(grammarAccess.getMidiFileAccess().getKeyAssignment_5_1(), "rule__MidiFile__KeyAssignment_5_1");
					put(grammarAccess.getMidiFileAccess().getPartsAssignment_6_1(), "rule__MidiFile__PartsAssignment_6_1");
					put(grammarAccess.getMidiFilePartAccess().getParttypeAssignment_1(), "rule__MidiFilePart__ParttypeAssignment_1");
					put(grammarAccess.getMidiFilePartAccess().getBarAssignment_2_1(), "rule__MidiFilePart__BarAssignment_2_1");
					put(grammarAccess.getMidiFilePartAccess().getRefPartAssignment_3_1(), "rule__MidiFilePart__RefPartAssignment_3_1");
					put(grammarAccess.getMidiFilePartAccess().getTextlinesAssignment_4_1(), "rule__MidiFilePart__TextlinesAssignment_4_1");
					put(grammarAccess.getMidiFilePartAccess().getTextlinesAssignment_4_2_1(), "rule__MidiFilePart__TextlinesAssignment_4_2_1");
					put(grammarAccess.getMidiFileTextLineAccess().getChordPartsAssignment_1_1(), "rule__MidiFileTextLine__ChordPartsAssignment_1_1");
					put(grammarAccess.getMidiFileChordPartAccess().getChordAssignment_1_1(), "rule__MidiFileChordPart__ChordAssignment_1_1");
					put(grammarAccess.getMidiFileChordPartAccess().getTextAssignment_2(), "rule__MidiFileChordPart__TextAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.mda.editor.xtext.ui.contentassist.antlr.internal.InternalMidiPlayerParser typedParser = (org.mda.editor.xtext.ui.contentassist.antlr.internal.InternalMidiPlayerParser) parser;
			typedParser.entryRuleMidiFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MidiPlayerGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MidiPlayerGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
